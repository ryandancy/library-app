API Paths
=========

All require authentication as admin with requisite permissions. There's one
admin created at the start with ALL the permissions; this is the One Admin To
Rule Them All.

All support JSON.

All PATCHes use application/merge-patch+json as the Content-Type.
(https://tools.ietf.org/html/rfc7396)

-----------------------------

GET /admins

Return a list of all admins in the system. If Accept header is
application/schema+json, instead return admin schema.

POST /admins

Create a new admin. Return admin data plus ID. ID is generated by server.

-----------------------------

GET /admins/:adminid

Return the admin data (e.g. permissions, name, ID, URL) for the specified admin.

PUT /admins/:adminid

Update the admin data. Return nothing.

PATCH /admins/:adminid

Partially update the admin data.

DELETE /admins/:adminid

Delete the admin. Note that the One Admin To Rule Them All cannot be deleted.
Return nothing.

-----------------------------

GET /patrons

Return a list of all patrons/students/whatever in the system. Sort by query arg
"sort_by" (values "created", "name" (default)) and "dir" (values "asc" (default)
and "desc"). It will return a "num" member with num of patrons, this is max
value for "per_page" arg (num patrons per page) times "page" arg (which page).
If "query" parameter is present, searches by that. If Accept header is
application/schema+json, instead return patron schema.

POST /patrons

Create a new patron. Return the new patron's data plus ID. ID is generated by
the server.

-----------------------------

GET /patrons/:patronid

Return the patron data (e.g. name, photo (?), items out) for the specified
patron.

PUT /patrons/:patronid

Update the patron data. Return nothing.

PATCH /patrons/:patronid

Partially update the patron data. Return new patron data.

DELETE /patrons/:patronid

Delete the patron. Return nothing.

-----------------------------

GET /items

Return a list of all items in the system. Sort by query arg "sort_by" (values
"created", "name" (default)) and "dir" (values "asc" (default) and "desc"). It
will return a "num" member with num of items, this is max value for "per_page"
arg (num items per page) times "page" arg (which page). If "query" parameter is
present, searches by that. If Accept header is application/schema+json, instead
return item schema.

POST /items

Create a new item. Return new item data plus ID. ID is generated by the server.

-----------------------------

JSON representation of MARC:
https://rossfsinger.com/blog/2010/09/a-proposal-to-serialize-marc-in-json/

GET /items/:itemid

Return the item data (e.g. MARC record, checkout) for the specified record.
If Accept header is application/marc, returns MARC record only; else
(application/json), returns non-MARC data + JSON representation of MARC.

PUT /items/:itemid

Update the item data for the specified item. Return nothing. If
Content-Type is application/marc, sets MARC record only (using MARC record
format); else (application/json), sets non-MARC data + JSON representation of
MARC.

PATCH /items/:itemid

Partially update the item data for the specified item. Return the new item data.
If Content-Type is application/marc, updates MARC record only (using MARC record
format); else (application/json), sets non-MARC data + JSON representation of
MARC.

DELETE /items/:itemid

Delete the specified item. Return nothing.

-----------------------------

GET /checkouts

Return a list of all checkouts in the system. By default, return checkouts with
items not returned. This behaviour can be modified through the value of the
query string args "with" and "filter"; boolean members of the checkout object
appearing in "with" must be true, and those appearing in "filter" must be false.
It is an error if the same member name appears in both "with" and "filter". Both
are optional. Sort by query arg "sort_by" (values "created", "name" (default))
and "dir" (values "asc" (default) and "desc"). It will return a "num" member
with num of patrons, this is max value for "per_page" arg (num patrons per page)
times "page" arg (which page). Alternatively, if Accept header is
application/schema+json, instead return the checkout schema.

POST /checkouts

Create a new checkout object. Return checkout data with ID. ID is generated by
the server.

-----------------------------

GET /checkouts/:checkoutid

Return the checkout data (e.g. patron, item, due date) for the specified
checkout.

PUT /checkouts/:checkoutid

Update the checkout data. Return nothing.

PATCH /checkouts/:checkoutid

Partially update the checkout data. Return new checkout data.

DELETE /checkouts/:checkoutid

Delete the checkout. Return nothing.

-----------------------------

GET /me

Return the admin you're currently logged in as.