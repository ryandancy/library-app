#%RAML 1.0 Library

usage: |
  Contains the RAML types (data types) for this API.
uses:
  marc: marc.raml
  basic: basic.raml
annotationTypes:
  unmodifiable: !include unmodifiable.raml
types:
  Item:
    type: object
    description: >
      An object representing an item in the system. Items can be checked out and
      in, and can be any kind of item, like books, maps, audio files, etc. All
      bibliographic information is specified through MARC records. Anything not
      in the `marc` property is information additional to MARC.
    # TODO Should there be some properties duplicating info in the MARC record
    # for easier access?
    properties:
      id?:
        type: integer
        (unmodifiable):
      marc: marc.MARCRecord
      created?:
        type: datetime
        (unmodifiable):
        example: 2016-06-01T09:31:02-03:30
      barcode:
        type: string
        pattern: ^\d+$
        example: '64020000035237'
      status:
        type: string
        enum:
          - in
          - out
          - missing
          - lost
      checkoutID?:
        type: integer
        description: >
          The ID of this item's checkout, if it has one. Not present if a
          checkout is not applicable. Note that this property is forbidden if
          `status` is `in`, `lost`, or `missing`, and is required if `status` is
          `out`.
    additionalProperties: false
    examples:
      in:
        marc: !include marc-example.raml
        created: 2014-03-26T17:20:34-05:00
        status: in
        barcode: '29563023651983'
      out:
        marc: !include marc-example.raml
        created: 2016-06-01T09:31:02-03:30
        status: out
        barcode: '53620000000087'
        checkoutID: 11425543
      lost:
        marc: !include marc-example.raml
        created: 2015-11-24T10:34:01-04:00
        status: lost
        barcode: '76543200000246'
  Checkout:
    type: object
    description: >
      An object representing a checkout of an item. Contains information
      relevant only to checking out, but not to the item, hence the separate
      object.
    properties:
      id?:
        type: integer
        (unmodifiable):
      itemID:
        type: integer
        description: >
          The ID of the Item associated with this Checkout.
      patronID:
        type: integer
        description: >
          The ID of the Patron associated with this Checkout.
      created?:
        type: date-time
        (unmodifiable):
        description: >
          The time the Checkout was created; i.e. the time the item was checked
          out.
      dueDate: date-only
      numRenewals: basic.natural
      status:
        type: string
        enum:
          - onTime
          - late
          - returned
          - lost
    additionalProperties: false
    example:
      itemID: 54336
      patronID: 102411
      outDate: 2016-07-30T11:34:02-03:00
      dueDate: 2016-09-13
      numRenewals: 2
      status: onTime
  Patron:
    type: object
    description: >
      An object representing a patron of the library. Patrons may have items
      checked out in their name.
    properties:
      id?:
        type: integer
        (unmodifiable):
      name: string
      created?:
        type: date-time
        (unmodifiable):
      pic?:
        # TODO Can the media type of image/whatever be noted?
        type: basic.uri
        default: http://localhost:8080/missing-pic.png # TODO proper missing pic
      checkoutIDs:
        type: integer[]
        description: A list of checkouts this Patron has.
    additionalProperties: false
    examples:
      simple:
        name: Pewdiepie
        created: 2016-02-23T14:25:06Z
        checkoutIDs: []
      complex:
        name: Ima NexamplÃ©
        created: 2015-12-03T11:54:55-00:30
        pic: http://some.where/a/path/to/a/picture/ima-nexample.jpg
        checkoutIDs:
          - 102441
          - 230527
  ReadWritePermission:
    type: object
    description: >
      An object representing an admin's permissions to read or write something.
    properties:
      read: boolean
      write: boolean
    additionalProperties: false
    example:
      read: true
      write: false
  Admin:
    type: object
    description: >
      An object representing an admin in the library. This could be a librarian,
      IT person, volunteer, or anyone who needs read or write access to the
      library. An admin has a set of permissions that correspond with OAuth
      scopes.
    # TODO should signOut/signIn (a) be capitalized and (b) be somehow put under
    # the checkout object? Implement with separate CRUD permissions?
    # TODO permissions are duplicated here and in the permissions annotations --
    # somehow merge?
    properties:
      id?:
        type: integer
        (unmodifiable):
      name: string
      created?:
        type: date-time
        (unmodifiable):
      item: ReadWritePermission
      patron: ReadWritePermission
      checkout: ReadWritePermission
      signOut:
        type: boolean
        description: >
          An admin with this permission can check out an item on behalf of a
          Patron. Note that this permission is different than checkout/write, as
          that permission also implies the ability to update/delete existing
          checkouts.
      signIn:
        type: boolean
        description: >
          An admin with this permission can check in an item on behalf of a
          Patron. Note that this permission is different than checkout/write, as
          that permission also implies the ability to update/delete existing
          checkouts.
      admin: ReadWritePermission
    additionalProperties: false
    example:
      name: Lieb Rarian
      created: 2017-08-12T00:05:21-05:00
      item:
        read: true
        write: true
      patron:
        read: true
        write: false
      checkout:
        read: true
        write: false
      signOut: true
      signIn: true
      admin:
        read: false
        write: false