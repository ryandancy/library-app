#%RAML 1.0 Library

usage: |
  Contains the RAML types (data types) for this API.
uses:
  marc: marc.raml
  basic: basic.raml
types:
  Item:
    type: object
    description: >
      An object representing an item in the system. Items can be checked out and
      in, and can be any kind of item, like books, maps, audio files, etc. All
      bibliographic information is specified through MARC records. Anything not
      in the `marc` property is information additional to MARC.
    # TODO Should there be some properties duplicating info in the MARC record
    # for easier access?
    properties:
      marc: marc.MARCRecord
      created: datetime
      barcode:
        type: string
        pattern: ^\d+$
        example: '64020000035237'
      status:
        type: string
        enum:
          - in
          - out
          - missing
          - lost
      checkout?:
        type: Checkout
        description: >
          Not present if this Item is embedded in a Checkout, or if a checkout
          is not applicable. Note that this property is forbidden if `status` is
          `in`, `lost`, or `missing`, and is required if `status` is `out`.
          Also, this is not present if this Item is embedded in a Checkout.
    additionalProperties: false
    examples:
      in:
        marc: !include marc-example.raml
        created: 2014-03-26T17:20:34-05:00
        status: in
        barcode: '29563023651983'
      out:
        marc: !include marc-example.raml
        created: 2016-06-01T09:31:02-03:30
        status: out
        barcode: '53620000000087'
        checkout:
          patron:
            name: John Smith
          outDate: 2016-07-15
          dueDate: 2016-07-29
          numRenewals: 0
          status: onTime
      lost:
        marc: !include marc-example.raml
        created: 2015-11-24T10:34:01-04:00
        status: lost
        barcode: '76543200000246'
      embedded:
        description: This example Item is embedded in a Checkout.
        value:
          marc: !include marc-example.raml
          created: 2016-06-01T09:31:02+03:00
          status: out
          barcode: '76543200000246'
  Checkout:
    type: object
    description: >
      An object representing a checkout of an item. Contains information
      relevant only to checking out, but not to the item, hence the separate
      object.
    properties:
      item?:
        type: Item
        description: >
          Not present if this Checkout is embedded in an Item.
      patron?:
        type: Patron
        description: >
          Not present if this Checkout is embedded in a Patron.
      outDate: date-only
      dueDate: date-only
      numRenewals: basic.natural
      status:
        type: string
        enum:
          - onTime
          - late
          - returned
          - lost
    additionalProperties: false
    examples:
      standalone:
        description: >
          This example Checkout is not embedded in an Item or a Patron.
        value:
          item:
            marc: !include marc-example.raml
            created: 2016-06-01T09:31:02-03:30
            status: out
            barcode: '53620000000087'
          patron:
            name: Joe Shmoe
            pic: http://example.com/path/to/pic.png
          outDate: 2016-07-30
          dueDate: 2016-09-13
          numRenewals: 2
          status: onTime
      inItem:
        description: >
          This example Checkout is embedded in an Item.
        value:
          patron:
            name: Ima Nexamplé
          outDate: 2017-01-05
          dueDate: 2017-01-12
          numRenewals: 0
          status: returned
      inPatron:
        description: >
          This example Checkout is embedded in a Patron.
        value:
          item:
            marc: !include marc-example.raml
            created: 2009-07-24T21:02:00Z
            status: out
            barcode: '53001024091248'
          outDate: 2013-10-31
          dueDate: 2014-03-20
          numRenewals: 4
          status: late
  Patron:
    type: object
    description: >
      An object representing a patron of the library. Patrons may have items
      checked out in their name.
    properties:
      name: string
      pic?:
        # TODO Can the media type of image/whatever be noted?
        type: basic.uri
        default: http://localhost:8080/missing-pic.png # TODO proper missing pic
      checkouts?:
        type: Checkout[]
        description: Not present if embedded in Checkout.
    additionalProperties: false
    examples:
      simple:
        name: Pewdiepie
        checkouts: []
      complex:
        name: Ima Nexamplé
        pic: http://some.where/a/path/to/a/picture/ima-nexamplé.jpg
        checkouts:
          - item:
              marc: !include marc-example.raml
              created: 1996-04-16T20:01:24-05:00
              status: out
              barcode: '50030886800009'
            outDate: 2015-01-23
            dueDate: 2015-02-12
            numRenewals: 1
            status: late
          - item:
              marc: !include marc-example.raml
              created: 2005-12-14T10:04:58-05:00
              status: out
              barcode: '31203598711892'
            outDate: 2015-03-14
            dueDate: 2015-03-26
            numRenewals: 0
            status: onTime
      embedded:
        description: >
          This Patron is embedded in a Checkout.
        value:
          name: Ihaveafirstname Amiddle Andalastname
          pic: http://localhost:8080/i-a-a.png
  ReadWritePermission:
    type: object
    description: >
      An object representing an admin's permissions to read or write something.
    properties:
      read: boolean
      write: boolean
    additionalProperties: false
    example:
      read: true
      write: false
  Admin:
    type: object
    description: >
      An object representing an admin in the library. This could be a librarian,
      IT person, volunteer, or anyone who needs read or write access to the
      library. An admin has a set of permissions that correspond with OAuth
      scopes.
    # TODO should signOut/signIn (a) be capitalized and (b) be somehow put under
    # the checkout object? Implement with separate CRUD permissions?
    # TODO permissions are duplicated here and in the permissions annotations --
    # somehow merge?
    properties:
      name: string
      item: ReadWritePermission
      patron: ReadWritePermission
      checkout: ReadWritePermission
      signOut:
        type: boolean
        description: >
          An admin with this permission can check out an item on behalf of a
          Patron. Note that this permission is different than checkout/write, as
          that permission also implies the ability to update/delete existing
          checkouts.
      signIn:
        type: boolean
        description: >
          An admin with this permission can check in an item on behalf of a
          Patron. Note that this permission is different than checkout/write, as
          that permission also implies the ability to update/delete existing
          checkouts.
      admin: ReadWritePermission
    additionalProperties: false
    example:
      name: Lieb Rarian
      item:
        read: true
        write: true
      patron:
        read: true
        write: false
      checkout:
        read: true
        write: false
      signOut: true
      signIn: true
      admin:
        read: false
        write: false