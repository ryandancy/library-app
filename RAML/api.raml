#%RAML 1.0

# TODO: XML support? YAML support?
# TODO: use something other than localhost?
# TODO: HTTPS
# TODO: more responses (4xx, 5xx)

title: Library App
description: >
  An app for a school (and possibly general) library. Currently in the early
  development/design stages, will change a lot.
version: v0
baseUri: /{version}
mediaType: application/json
uses:
  basic: basic.raml
  types: types.raml
securitySchemes:
  oauth2: !include security.raml
securedBy:
  - oauth2
annotationTypes:
  permissions: !include permissions.raml
resourceTypes:
  collection:
    usage: Apply on a collection for standard `GET` and `POST` methods.
    get:
      description: >
        Get a list of all <<itemType | !pluralize>>. Can be sorted and supports
        pagination.
      (permissions): <<itemType | !lowercase | !singularize>>.read
      queryParameters:
        # TODO extract sortable (?), pageable trait(s)?
        page:
          description: The page to retrieve, zero-indexed.
          type: basic.natural
          default: 0
          example: 3
        per_page:
          description: >
            How many <<itemType | !pluralize>> to include in the list in the
            response.
          type: integer
          minimum: 1
          maximum: 200
          default: 30
          example: 50
        sort_by:
          description: >
            What to sort the returned <<itemType | !pluralize>> list by.
          enum: # TODO any more sort_by values?
            - created
            - name
          default: created
        direction:
          order: >
            The order in which to sort the <<itemType | !pluralize>> -- either
            ascending or descending.
          enum:
            - asc
            - desc
          default: asc
      responses:
        200:
          body:
            properties:
              items: types.<<itemType | !uppercamelcase | !singularize>>[]
              hasMore: boolean
              maxItems: integer
              remainingItems: integer
        422: # Unprocessable Entity - semantic error
          properties:
            msg: string
    post:
      description: Create a new <<itemType | !singularize>>.
      (permissions): <<itemType | !lowercase | !singularize>>.write
      body:
        type: types.<<itemType | !uppercamelcase | !singularize>>
      responses:
        201:
          headers:
            Location: string
        400:
          properties:
            msg: string
  collectionItem:
    usage: >
      Apply to a subresource of a collection (i.e. an individual item) for
      standard `GET`, `PUT`, `PATCH`, and `DELETE` methods.
    get:
      description: Get the contents of this <<itemType | !singularize>>.
      (permissions): <<itemType | !lowercase | !singularize>>.read
      responses:
        200:
          body:
            type: types.<<itemType | !uppercamelcase | !singularize>>
    put:
      description: Update this <<itemType | !singularize>>.
      (permissions): <<itemType | !lowercase | !singularize>>.write
      body:
        type: types.<<itemType | !uppercamelcase | !singularize>>
      responses:
        204:
    patch:
      description: >
        Partially update this <<itemType | !singularize>>.
      (permissions): <<itemType | !lowercase | !singularize>>.write
      body:
        application/merge-patch+json:
      responses:
        200:
          body:
            type: types.<<itemType | !uppercamelcase | !singularize>>
    delete:
      description: >
        Delete this <<itemType | !singularize>>.
      (permissions): <<itemType | !lowercase | !singularize>>.write
      reponses:
        204:
/admins:
  type:
    collection:
      itemType: admin
  /{id}:
    type:
      collectionItem:
        itemType: admin
/patrons:
  type:
    collection:
      itemType: patron
  /{id}:
    type:
      collectionItem:
        itemType: patron
/items: # TODO MARC stuff, signIn/signOut
  type:
    collection:
      itemType: item
  /{id}:
    type:
      collectionItem:
        itemType: item
/checkouts:
  type:
    collection:
      itemType: checkout
  /{id}:
    type:
      collectionItem:
        itemType: checkout