#%RAML 1.0

# TODO: XML support? YAML support?
# TODO: use something other than localhost?
# TODO: HTTPS
# TODO: more responses (4xx, 5xx)

title: Library App
description: >
  An app for a school (and possibly general) library. Currently in the early
  development/design stages, will change a lot.
version: v0
baseUri: /{version}
mediaType: application/json
uses:
  basic: basic.raml
  types: types.raml
  marc: marc.raml
securitySchemes:
  oauth2: !include security.raml
securedBy:
  - oauth2
annotationTypes:
  permissions: !include permissions.raml
resourceTypes:
  collection:
    usage: Apply on a collection for standard `GET` and `POST` methods.
    get:
      description: >
        Get a list of all <<name | !pluralize>>. Can be sorted and supports
        pagination.
      (permissions): <<permission>>.read
      queryParameters:
        # TODO extract sortable (?), pageable trait(s)?
        page:
          description: The page to retrieve, zero-indexed.
          type: basic.natural
          default: 0
          example: 3
        per_page:
          description: >
            How many <<name | !pluralize>> to include in the list in the
            response.
          type: integer
          minimum: 1
          maximum: 200
          default: 30
          example: 50
        sort_by:
          description: >
            What to sort the returned <<name | !pluralize>> list by.
          enum: # TODO any more sort_by values?
            - created
            - name
          default: created
        direction:
          description: >
            The order in which to sort the <<name | !pluralize>> -- either
            ascending or descending.
          enum:
            - asc
            - desc
          default: asc
      responses:
        200:
          body:
            properties:
              items: <<itemType>>[]
              hasMore: boolean
              maxItems: integer
              remainingItems: integer
        422: # Unprocessable Entity - semantic error
          properties:
            msg: string
    post:
      description: Create a new <<name>>.
      (permissions): <<permission>>.write
      body:
        type: <<itemType>>
      responses:
        201:
          headers:
            Location: string
        400:
          properties:
            msg: string
  collectionItem:
    usage: >
      Apply to a subresource of a collection (i.e. an individual item) for
      standard `GET`, `PUT`, `PATCH`, and `DELETE` methods.
    get:
      description: Get the contents of this <<name>>.
      (permissions): <<permission>>.read
      responses:
        200:
          body:
            type: <<itemType>>
    put:
      description: Update this <<name>>.
      (permissions): <<permission>>.write
      body:
        type: <<itemType>>
      responses:
        204:
    patch:
      description: >
        Partially update this <<name>>.
      (permissions): <<permission>>.write
      body:
        application/merge-patch+json:
          type: object
      responses:
        200:
          body:
            type: types.<<itemType>>
    delete:
      description: >
        Delete this <<name>>.
      (permissions): <<permission>>.write
      responses:
        204:
/admins:
  type:
    collection:
      name: admin
      itemType: types.Admin
      permission: admin
  /{id}:
    type:
      collectionItem:
        name: admin
        itemType: types.Admin
        permission: admin
/patrons:
  type:
    collection:
      name: patron
      itemType: types.Patron
      permission: patron
  /{id}:
    type:
      collectionItem:
        name: patron
        itemType: types.Patron
        permission: patron
/items:
  type:
    collection:
      name: item
      itemType: types.Item
      permission: item
  /{id}:
    type:
      collectionItem:
        name: item
        itemType: types.Item
        permission: item
    /marc:
      description: The MARC record of the item with this ID.
      type:
        collectionItem:
          name: MARC record
          itemType: marc.MARCRecord
          permission: item
      get: # XXX this might not work (does RAML do media type extensions?)
        responses:
          200:
            body:
              application/marc:
                type: string
      post:
        body:
          application/marc:
            type: string
/checkouts:
  type:
    collection:
      name: checkout
      itemType: types.Checkout
      permission: checkout
  post:
    (permissions): signOut
  /{id}:
    type:
      collectionItem:
        name: checkout
        itemType: types.Checkout
        permission: checkout
    patch:
      description: >
        Partially update this checkout. Note that if the PATCH body contains
        only `status: returned` the permission required is `signIn`; otherwise,
        it's `checkout.write`.
      (permissions):
        - checkout.write
        - signOut